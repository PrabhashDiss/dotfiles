# Dotfiles - Bash Configuration Additions
# Source this file from your ~/.bashrc: source ~/Documents/dotfiles/shell/bashrc_additions

# Enhanced history settings
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTCONTROL=ignoredups:erasedups
shopt -s histappend

# Better directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Git shortcuts
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline'
alias gd='git diff'

# Development shortcuts
alias v='nvim'
alias vim='nvim'
alias py='python3'
alias pip='pip3'

# fzf enhanced aliases
if command -v fzf >/dev/null 2>&1; then
    # Edit multiple files with fzf and bat preview
    if command -v bat >/dev/null 2>&1; then
        alias vf='vim $(fzf -m --preview "bat --color=always {}")'
    elif command -v batcat >/dev/null 2>&1; then
        alias vf='vim $(fzf -m --preview "batcat --color=always {}")'
        # Create bat alias for batcat on Ubuntu
        alias bat='batcat'
    else
        alias vf='vim $(fzf -m --preview "cat {}")'
    fi
    
    # Find and cd to directory
    alias cdf='cd $(find . -type d | fzf)'
    
    # Kill process with fzf
    alias kp='kill -9 $(ps aux | fzf | awk "{print \$2}")'
fi

# cht.sh with fzf integration
# Provides a `cht` function that prefers the installed `cht.sh` client but
# falls back to curl if not installed. Integrates with fzf for topic selection
# and allows for searching within the selected cheat sheet.

if command -v fzf >/dev/null 2>&1; then
    # Function to get available cheat sheet topics
    _cht_topics() {
        # Use the :list endpoint and filter empty lines
        curl -fsS https://cht.sh/:list 2>/dev/null | sed '/^$/d'
    }

    # Helper to query cht.sh with color.
    # This is used for the fzf preview window.
    _cht_query_color() {
        if command -v cht.sh >/dev/null 2>&1; then
            cht.sh "$@"
        else
            local q="$(printf '%s' "$*" | sed 's/ /+/g')"
            curl -fsS "https://cht.sh/${q}"
        fi
    }

    # Helper to query cht.sh and get plain text (no color codes).
    # This is used for the final interactive search.
    _cht_query_text() {
        local query_output
        if command -v cht.sh >/dev/null 2>&1; then
            # Use the NO_COLOR environment variable to disable color for the local client
            query_output=$(NO_COLOR=1 cht.sh "$@")
        else
            local q="$(printf '%s' "$*" | sed 's/ /+/g')"
            # Append ?T to the URL to request plain text from the server
            query_output=$(curl -fsS "https://cht.sh/${q}?T")
        fi

        # Check for errors before proceeding
        if [[ -z "$query_output" ]]; then
            echo "Error: Failed to fetch content for '$*'." >&2
            return 1
        fi
        printf '%s\n' "$query_output"
    }

    # Export the color query function so it is available to the fzf preview's subshell.
    export -f _cht_query_color

    # Interactive cheat sheet lookup with fzf
    cht() {
        local topic
        if [[ $# -eq 0 ]]; then
            # No arguments - show topic selector
            topic=$(_cht_topics | fzf --prompt="Select topic: " \
                --preview 'bash -c "_cht_query_color {}"' \
                --preview-window=right:70%:wrap)
            if [[ -n "$topic" ]]; then
                # Trim whitespace
                topic="$(printf '%s' "$topic" | sed 's/^\s*//;s/\s*$//')"
                # Get the plain text version and pipe it to another fzf for searching
                _cht_query_text "$topic" | fzf --prompt="Search in '$topic': " --preview-window=hidden
            fi
        else
            # Arguments provided - get plain text and pipe to fzf for searching
            _cht_query_text "$@" | fzf --prompt="Search in '$*': " --preview-window=hidden
        fi
    }
fi

# System monitoring
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias ps='ps aux'

# Network utilities
alias ping='ping -c 5'
alias ports='netstat -tulanp'

# fzf key bindings and fuzzy completion
if command -v fzf >/dev/null 2>&1; then
    # Source fzf key bindings (compatible with older versions)
    if [[ -f "/usr/share/doc/fzf/examples/key-bindings.bash" ]]; then
        source "/usr/share/doc/fzf/examples/key-bindings.bash"
    elif [[ -f "/usr/share/fzf/key-bindings.bash" ]]; then
        source "/usr/share/fzf/key-bindings.bash"
    fi
    
    # Source fzf completion for **<TAB> trigger
    if [[ -f "/usr/share/bash-completion/completions/fzf" ]]; then
        source "/usr/share/bash-completion/completions/fzf"
        # Set completion trigger (default is **)
        export FZF_COMPLETION_TRIGGER='**'
        
        # Set up completion for other commands
        if declare -F _fzf_setup_completion >/dev/null 2>&1; then
            _fzf_setup_completion path ls
            _fzf_setup_completion path cat
        fi
    fi
    
    # Custom fzf options
    export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
    export FZF_CTRL_T_OPTS="--preview 'cat {}' --preview-window=right:50%:wrap"
    export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
    
    # Use bat for preview if available
    if command -v bat >/dev/null 2>&1; then
        export FZF_CTRL_T_OPTS="--preview 'bat --color=always {}' --preview-window=right:50%:wrap"
    elif command -v batcat >/dev/null 2>&1; then
        export FZF_CTRL_T_OPTS="--preview 'batcat --color=always {}' --preview-window=right:50%:wrap"
    fi
fi

# Better prompt with git branch info
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color'
fi

# Colored prompt
export PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[33m\]$(parse_git_branch)\[\033[00m\]\$ '

# Enable programmable completion features
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# Export common development environment variables
export EDITOR=nvim
export VISUAL=nvim
export BROWSER=firefox
export PATH="$HOME/bin:$HOME/.local/bin:$PATH"

# Use official fzf directory completion for cd
if command -v fzf >/dev/null 2>&1 && declare -F _fzf_dir_completion >/dev/null 2>&1; then
    # Remove any existing cd completion and use fzf's directory completion
    complete -r cd 2>/dev/null || true
    complete -F _fzf_dir_completion -o default -o bashdefault cd
fi
